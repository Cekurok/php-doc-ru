<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 347688 Maintainer: rjhdby Status: ready -->
<!-- Reviewed: no -->
<!-- $Revision$ -->
<phpdoc:classref xmlns:phpdoc="http://php.net/ns/phpdoc" xml:id="class.variant" xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude">
 <titleabbrev>VARIANT</titleabbrev>
 <title>Класс VARIANT</title>
 <partintro>
  
<!-- {{{ VARIANT intro -->
  <section xml:id="variant.intro">
   &reftitle.intro;
   <para>
    VARIANT - это эквивалент zval для COM; это структура, которая может
    содержать значения различных допустимых типов. Класс VARIANT
    входит в расширение COM и позволяет более полно контролировать
    значения передаваемые от PHP к COM и обратно.
   </para>
  </section>
<!-- }}} -->
  
  <section xml:id="variant.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>VARIANT</classname></ooclass>

<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>VARIANT</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.variant')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])">
     <xi:fallback />
    </xi:include>
   </classsynopsis>
<!-- }}} -->

  </section>
  
  <section xml:id="class.variant.examples">
   <title>Примеры VARIANT</title>
   <para>
    <example xml:id="com.variant.example.php5">
     <title>Пример использования Variant</title>
     <programlisting role="php">
<![CDATA[
<?php
$v = new VARIANT(42);
print "The type is " . variant_get_type($v) . "<br/>";
print "The value is " . $v . "<br/>";
?>
]]>
     </programlisting>
    </example>
   </para>
   <note>
    <para>
     Когда возвращается 
     значение или извлекается свойство, VARIANT преобразуется в значение PHP 
     только если есть прямая связь между типами, что не приведет 
     к потере информации. Во всех остальных случаях результат вернется в виде
     экземпляра класса VARIANT. Вы можете принудительно указать PHP 
     конвертировать значения в типы PHP используя оператор приведения типов
     или же преобразовывать их в строку используя функцию <function>print</function>.
     Вы можете использовать множество функций класса для арефметических
     операций без приведения значений к типам PHP с риском потери информации.
    </para>
   </note>
   <para>
    Смотрите также <function>variant_get_type</function>.
   </para>
  </section>
  
 </partintro>

 &reference.com.entities.variant;
 
</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
