<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<refentry xml:id="function.sodium-crypto-pwhash-str" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>sodium_crypto_pwhash_str</refname>
  <refpurpose>Получить ASCII-кодированный хеш</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>sodium_crypto_pwhash_str</methodname>
   <methodparam><type>string</type><parameter>password</parameter></methodparam>
   <methodparam><type>int</type><parameter>opslimit</parameter></methodparam>
   <methodparam><type>int</type><parameter>memlimit</parameter></methodparam>
  </methodsynopsis>
  <para>
   Использует алгоритм хеширования ЦП и памяти вместе со случайно сгенерированной солью,
   а также лимиты памяти и ЦП для генерации хеша, закодированном в ASCII, подходящего в качестве хранения пароля.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>password</parameter></term>
    <listitem>
     <para>
      <type>string</type>; Пароль для которого создается хеш.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>opslimit</parameter></term>
    <listitem>
     <para>
      Представляет максимальное количество вычислений для выполнения
      Увеличение этого числа приведет к тому, что функции потребуется больше циклов ЦП для вычисления ключа.
      Существуют константы, доступные для установки предела операций для соответствующих значений в зависимости от предполагаемого использования,
      в порядке убывания: <constant>SODIUM_CRYPTO_PWHASH_OPSLIMIT_INTERACTIVE</constant>,
      <constant>SODIUM_CRYPTO_PWHASH_OPSLIMIT_MODERATE</constant>,
      <constant>SODIUM_CRYPTO_PWHASH_OPSLIMIT_SENSITIVE</constant>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>memlimit</parameter></term>
    <listitem>
     <para>
      Максимальный объем ОЗУ в байтах, который будет использовать функция.
      Существуют константы, которые помогут вам выбрать подходящее значение в порядке размера:
      <constant>SODIUM_CRYPTO_PWHASH_MEMLIMIT_INTERACTIVE</constant>,
      <constant>SODIUM_CRYPTO_PWHASH_MEMLIMIT_MODERATE</constant> и <constant>SODIUM_CRYPTO_PWHASH_MEMLIMIT_SENSITIVE</constant>.
      Как правило, они должны сочетаться с соответствующими значениями opslimit.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Возвращает захешированный пароль, &return.falseforfailure;.
  </para>
  <para>
   Для получения одного и того же хеша пароля из одного и того же пароля должны использоваться одинаковые значения для
   <parameter>opslimit</parameter> и <parameter>memlimit </parameter>.
   Они встроены в сгенерированный хеш, поэтому все, что нужно для проверки хеша, включено.
   Это позволяет функции <function>sodium_crypto_pwhash_str_verify</function> проверять хеш,
   не требуя отдельного хранилища для других параметров.
   
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Хеши вычисляются с использованием алгоритма Argon2ID, что обеспечивает устойчивость как к атакам на GPU, так и к атакам на сторонние каналы.
    В отличие от функции <function>password_hash</function>, здесь нет параметра для соли (соль генерируется автоматически),
    а параметры <parameter>opslimit</parameter> и <parameter>memlimit</parameter> не являются обязательными.
   </para>
  </note>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Пример использования <function>password_hash</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$password = 'password';
echo sodium_crypto_pwhash_str(
    $password,
    SODIUM_CRYPTO_PWHASH_OPSLIMIT_INTERACTIVE,
    SODIUM_CRYPTO_PWHASH_MEMLIMIT_INTERACTIVE
);
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
$argon2id$v=19$m=65536,t=2,p=1$oWIfdaXwWwhVmovOBc2NAQ$EbsZ+JnZyyavkafS0hoc4HdaOB0ILWZESAZ7kVGa+Iw
]]>
      </screen>
     </example>
    </para> 
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>sodium_crypto_pwhash_str_verify</function></member>
    <member><function>sodium_crypto_pwhash</function></member>
    <member><function>password_hash</function></member>
    <member><function>password_verify</function></member>
    <member><link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://download.libsodium.org/doc/password_hashing/the_argon2i_function.html">Документация по Libsodium Argon2</link></member>
   </simplelist>
  </para>
 </refsect1>
 
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
